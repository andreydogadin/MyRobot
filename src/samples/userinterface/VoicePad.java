/*
 * VoicePad.java
 *
 * Created on January 7, 2002, 1:32 PM
 */

package samples.userinterface;

import javax.swing.*;
import java.io.*;

import com.cloudgarden.speech.*;
import com.cloudgarden.speech.userinterface.*;
import javax.media.*;
import javax.speech.*;
import javax.speech.synthesis.*;
import javax.speech.recognition.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.text.*;

import samples.synthesis.*;

/**
 * A sample Swing-based application which uses the Mouth component and a
 * JEditorPane to display a text document and highlight words currently being spoken. When the "Speak" button
 * is pressed it will start speaking either the text currently selected, or will start speaking from the current cursor
 * position if no text is selected. Also allows synthesized speech to be saved to a MPEG file.
 *
 */
public class VoicePad extends javax.swing.JFrame {
    
    Mouth mouth;
    Synthesizer synth;
    Recognizer reco;
    DefaultStyledDocument doc;
    SynthesizerModeDesc synDesc = null;
    Voice voice = null;
    boolean speaking = false;
    SimpleAttributeSet atts;
    CGSpeakableAdapter spa;
    int fstart=0; //offset position of first word in selected text (or cursor position)
    
    /** Creates new form VoicePad */
    public VoicePad() {
	initComponents();
	atts = new SimpleAttributeSet();
	StyleConstants.setFontFamily(atts,"Tahoma");
	StyleConstants.setFontSize(atts,11);
	
	spa = new CGSpeakableAdapter() {
	    public void wordStarted(final SpeakableEvent ev) {
		Runnable r = new Runnable() {
		    public void run() {
			int start=0, end=0;
			start = ev.getWordStart()+fstart;
			end = ev.getWordEnd()+fstart;
			StyleConstants.setUnderline(atts,true);
			doc.setCharacterAttributes(start,end-start,atts,true);
			jEditorPane1.setCaretPosition(start);
			jEditorPane1.setSelectionStart(start);
			jEditorPane1.setSelectionEnd(end);
			jEditorPane1.repaint();
		    }
		};
		SwingUtilities.invokeLater(r);
	    }
	    public void viseme(CGSpeakableEvent ev) {
		if(mouth != null) mouth.paintEvent(ev);
	    }
	    public void mouthShape(CGSpeakableEvent ev) {
		if(mouth != null) mouth.paintEvent(ev);
	    }
	};
	
	//Fill the "Voice" menu up with available engines and voices.
	EngineList syns = Central.availableSynthesizers(null);
	for(int i=0;i<syns.size();i++) {
	    final SynthesizerModeDesc desc = (SynthesizerModeDesc)syns.elementAt(i);
	    JMenu sm = new JMenu(desc.getLocale().getDisplayName());
	    Font font = new Font("Tahoma",Font.PLAIN,11);
	    sm.setFont(font);
	    voiceMenu.add(sm);
	    Voice[] vcs = desc.getVoices();
	    for(int j=0;j<vcs.length;j++) {
		final Voice vc = vcs[j];
		JMenuItem it = new JMenuItem(vcs[j].getName());
		it.setFont(font);
		ActionListener al = new ActionListener() {
		    Voice v = vc;
		    SynthesizerModeDesc synDesc = desc;
		    public void actionPerformed(ActionEvent e) {
			try {
			    //Clean up the old Synthesizer
			    synth.removeSpeakableListener(spa);
			    synth.cancelAll();
			    synth.deallocate();
			    synth.waitEngineState(synth.DEALLOCATED);
			    
			    //And start a new one
			    synth = Central.createSynthesizer(synDesc);
			    synth.allocate();
			    synth.waitEngineState(synth.ALLOCATED);
			    synth.getSynthesizerProperties().setVoice(v);
			    synth.addSpeakableListener(spa);
			    
			    //if already speaking, keep speaking with the new voice
			    if(speaking) speakText(null);
			    else clearTextSelection();
			    
			} catch(Exception ex) {
			    ex.printStackTrace();
			}
		    }
		};
		it.addActionListener(al);
		sm.add(it);
	    }
	}
	mouth = new Mouth(Color.red);
	jPanel1.add(mouth);
	try {
	    synth = Central.createSynthesizer(null);
	    synth.allocate();
	    synth.waitEngineState(synth.ALLOCATED);
	    synth.addSpeakableListener(spa);
	} catch(Exception e) {
	    e.printStackTrace();
	}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel2 = new javax.swing.JPanel();
        speakButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        speakToWAVMenuItem = new javax.swing.JMenuItem();
        speakToMP3MenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        voiceMenu = new javax.swing.JMenu();

        setTitle("CloudGarden's VoicePad");
        setFont(new java.awt.Font("Tahoma", 0, 12));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 15, 1));

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setFont(jPanel1.getFont());
        speakButton.setFont(new java.awt.Font("Tahoma", 0, 11));
        speakButton.setText("Speak");
        speakButton.setToolTipText("Speaks the currently-selected text, or if no text is selected, speaks from the current cursor position.");
        speakButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speakButtonActionPerformed(evt);
            }
        });

        jPanel2.add(speakButton);

        stopButton.setFont(new java.awt.Font("Tahoma", 0, 11));
        stopButton.setText("Stop");
        stopButton.setToolTipText("Stops speaking.");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        jPanel2.add(stopButton);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(50, 30));
        jPanel1.setPreferredSize(new java.awt.Dimension(70, 40));
        jPanel2.add(jPanel1);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 500));
        jEditorPane1.setFont(new java.awt.Font("Tahoma", 0, 10));
        jEditorPane1.setContentType("text/rtf");
        jScrollPane1.setViewportView(jEditorPane1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        menuBar.setBackground(new java.awt.Color(51, 153, 0));
        menuBar.setFont(new java.awt.Font("Dialog", 0, 12));
        fileMenu.setText("File");
        fileMenu.setToolTipText("Open text, or speak to MP3 file.");
        fileMenu.setFont(new java.awt.Font("Tahoma", 0, 11));
        fileMenu.setOpaque(false);
        openMenuItem.setFont(new java.awt.Font("Tahoma", 0, 11));
        openMenuItem.setText("Open text file");
        openMenuItem.setToolTipText("Open a text file and displays contents in the main panel.");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);
        speakToWAVMenuItem.setFont(new java.awt.Font("Tahoma", 0, 11));
        speakToWAVMenuItem.setText("Speak to WAV file");
        speakToWAVMenuItem.setToolTipText("Speaks the currently-selected text to an MP3 file, or if no text is \nselected, speaks from the current cursor position.");
        speakToWAVMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speakToWAVMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(speakToWAVMenuItem);
        speakToMP3MenuItem.setFont(new java.awt.Font("Tahoma", 0, 11));
        speakToMP3MenuItem.setText("Speak to MP3 file");
        speakToMP3MenuItem.setToolTipText("Speaks the currently-selected text to an MP3 file, or if no text is \nselected, speaks from the current cursor position.");
        speakToMP3MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speakToMP3MenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(speakToMP3MenuItem);
        exitMenuItem.setFont(new java.awt.Font("Tahoma", 0, 11));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);
        menuBar.add(fileMenu);
        voiceMenu.setText("Voice");
        voiceMenu.setToolTipText("Changes the voice used for speaking.");
        voiceMenu.setFont(new java.awt.Font("Tahoma", 0, 11));
        voiceMenu.setOpaque(false);
        menuBar.add(voiceMenu);
        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents

    private void speakToWAVMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speakToWAVMenuItemActionPerformed
	JFileChooser fc = new JFileChooser(".");
	fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
	    public boolean accept(File file) {
		if(file.isDirectory() || file.getName().endsWith(".wav")) return true;
		return false;
	    }
	    public String getDescription() {
		return "WAV Files";
	    }
	});
	int returnVal = fc.showSaveDialog(this);
	if(returnVal != JFileChooser.APPROVE_OPTION) return;
	final File file = fc.getSelectedFile();
	Runnable r = new Runnable() {
	    public void run() {
		try {
		    speakText(file);
		} catch(Exception e) {
		    e.printStackTrace();
		}
	    }
	};
	new Thread(r).start();
     }//GEN-LAST:event_speakToWAVMenuItemActionPerformed
    
    private void speakToMP3MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speakToMP3MenuItemActionPerformed
	JFileChooser fc = new JFileChooser(".");
	fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
	    public boolean accept(File file) {
		if(file.isDirectory() || file.getName().endsWith(".mp3")) return true;
		return false;
	    }
	    public String getDescription() {
		return "MP3 Files";
	    }
	});
	int returnVal = fc.showSaveDialog(this);
	if(returnVal != JFileChooser.APPROVE_OPTION) return;
	final File file = fc.getSelectedFile();
	Runnable r = new Runnable() {
	    public void run() {
		try {
		    speakText(new javax.media.MediaLocator(file.toURL()));
		} catch(Exception e) {
		    e.printStackTrace();
		}
	    }
	};
	new Thread(r).start();
    }//GEN-LAST:event_speakToMP3MenuItemActionPerformed
    
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
	synth.cancelAll();
	speaking = false;
	clearTextSelection();
    }//GEN-LAST:event_stopButtonActionPerformed
    
    private void speakButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speakButtonActionPerformed
	speakText(null);
    }//GEN-LAST:event_speakButtonActionPerformed
    
    private void speakText(final Object media) {
	doc = (DefaultStyledDocument)jEditorPane1.getDocument();
	if(doc == null) return;
	
	//Clear any underlining
	StyleConstants.setUnderline(atts,false);
	doc.setCharacterAttributes(0,doc.getLength(),atts,true);
	
	String text = jEditorPane1.getSelectedText();
	int start = jEditorPane1.getSelectionStart();
	StyleConstants.setUnderline(atts,true);
	jEditorPane1.setSelectedTextColor(Color.red);
	jEditorPane1.requestFocus();
	if(text == null) {
	    try {
		start = jEditorPane1.getCaretPosition();
		if(start < 0) start = 0;
		text = jEditorPane1.getText(start,doc.getLength()-start);
	    } catch(Exception e) {
		text = "ERROR GETTING TEXT";
		e.printStackTrace();
	    }
	}
	fstart = start;
	try {
	    speaking = true;
	    if(media == null) {
		synth.speakPlainText(text,null);
	    } else if(media instanceof MediaLocator) {
		new MPEGFileWriter().speakToMedia(synth,text,(MediaLocator)media);
	    } else if(media instanceof File) {
		new WAVFileWriter().speakToFile(synth,text,(File)media);
            }
	} catch(Exception e) {
	    e.printStackTrace();
	}
    }
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
	JFileChooser fc = new JFileChooser(".");
	fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
	    public boolean accept(File file) {
		if(file.isDirectory() || file.getName().endsWith(".txt")) return true;
		return false;
	    }
	    public String getDescription() {
		return "Text Files";
	    }
	});
	int returnVal = fc.showOpenDialog(this);
	if(returnVal != JFileChooser.APPROVE_OPTION) return;
	File file = fc.getSelectedFile();
	try {
	    doc = new DefaultStyledDocument();
	    jEditorPane1.setDocument(doc);
	    DataInputStream in = new DataInputStream(new FileInputStream(file));
	    String text = "", buff;
	    while((buff= in.readLine()) != null) {
		doc.insertString(doc.getLength(),buff+"\n",atts);
	    }
	    jEditorPane1.setCaretPosition(0);
	} catch(Exception e) {
	    e.printStackTrace();
	}
    }//GEN-LAST:event_openMenuItemActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
	exitForm(null);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
	try {
	    if(synth != null) {
		synth.cancelAll();
		synth.deallocate();
		synth.waitEngineState(synth.DEALLOCATED);
	    }
	} catch(Exception e2) {
	    e2.printStackTrace();
	}
	System.exit(0);
    }//GEN-LAST:event_exitForm
    
    private void clearTextSelection() {
	int pos = jEditorPane1.getCaretPosition();
	jEditorPane1.setSelectionStart(0);
	jEditorPane1.setSelectionEnd(0);
	jEditorPane1.setCaretPosition(pos);
	jEditorPane1.requestFocus();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	new VoicePad().show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem speakToWAVMenuItem;
    private javax.swing.JMenu voiceMenu;
    private javax.swing.JButton speakButton;
    private javax.swing.JMenuItem speakToMP3MenuItem;
    private javax.swing.JButton stopButton;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenuItem exitMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
